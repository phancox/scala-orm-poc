package com.dtc.deltasoft.entity

import scala.annotation.target.field
import scala.beans.BeanProperty
import scala.slick.driver._
import javax.persistence._

import com.dtc.deltasoft.Logging
import com.googlecode.mapperdao._
import com.googlecode.mapperdao.{ Entity }
import com.googlecode.mapperdao.utils._

/**
 * Persistence profile for Slick. Used for generating DDL.
 */
trait NamedEntityProfile { self: Profile =>
  import profile.simple._

  object NamedEntities extends Table[NamedEntity]("NAMEDENTITY".asDbId) {

    def id = column[Int]("ID".asDbId, O.PrimaryKey, O.AutoInc)

    def code = column[String]("CODE".asDbId, O.NotNull)
    def name = column[String]("NAME".asDbId, O.NotNull)
    def description = column[String]("DESCRIPTION".asDbId, O.Nullable)
    def comments = column[String]("COMMENTS".asDbId, O.Nullable)

    def * = id ~ code ~ name ~ description ~ comments <> (
      { rs => new NamedEntity(rs._2, rs._3, rs._4, rs._5) with SurrogateIntId { val id: Int = rs._1 } },
      { namedEntity: NamedEntity => Some((0, "", "", "", "")) })

    def byId = createFinderBy(_.id)
  }
}

/**
 * MapperDao '''CRUD''' class for the [[NamedEntity]] entity.
 */
class NamedEntityDao(ormConnections: OrmConnections)(implicit dbConfig: DbConfig)
    extends TransactionalSurrogateIntIdCRUD[NamedEntity]
    with SurrogateIntIdAll[NamedEntity] {
  val mapperDao = ormConnections.mapperDao
  val queryDao = ormConnections.queryDao
  val txManager = ormConnections.txManager
  val entity = new NamedEntityEntity
}

/**
 * MapperDao '''Entity''' class for the [[NamedEntity]] entity.
 */
class NamedEntityEntity(implicit dbConfig: DbConfig)
    extends Entity[Int, SurrogateIntId, NamedEntity] with Logging {
  trace("Creating NamedEntityEntity")
  val id = key("ID".asDbId) autogenerated (_.id)
  val code = column("CODE".asDbId) to (_.code)
  val name = column("NAME".asDbId) to (_.name)
  val description = column("DESCRIPTION".asDbId) to (_.description)
  val comments = column("COMMENTS".asDbId) to (_.comments)
  def constructor(implicit m: ValuesMap) =
    new NamedEntity(code, name, description, comments) with SurrogateIntId {
      val id: Int = NamedEntityEntity.this.id
    }
}

/**
 * The NamedEntity entity ...
 *
 * @param id
 * The named entity' id (primary key).
 *
 * @param code
 * The named entity's code.
 *
 * @param name
 * The named entity's name.
 *
 * @param description
 * The named entity's description.
 *
 * @param comments
 * The named entity's comments.
 *
 */
@javax.persistence.Entity
@Table(name = "NAMEDENTITY")
case class NamedEntity(
    @(Column @field)(name = "CODE")@BeanProperty var code: String = null,
    @(Column @field)(name = "NAME")@BeanProperty var name: String = null,
    @(Column @field)(name = "DESCRIPTION")@BeanProperty var description: String = null,
    @(Column @field)(name = "COMMENTS")@BeanProperty var comments: String = null) {

  @Id @GeneratedValue(strategy = GenerationType.IDENTITY) @Column(name = "ID") @BeanProperty
  var hibernateId: Int = _

  def this() = this(code = null)

  override def toString() = {
    name + " (" + code + ")"
  }
}