package com.dtc.deltasoft.entity

import javax.persistence._
import scala.annotation.target.field
import scala.beans.BeanProperty
import com.googlecode.mapperdao._
import com.googlecode.mapperdao.{ Entity }
import scala.slick.driver._
import grizzled.slf4j.Logging

/**
 * Persistence profile for Slick. Used for generating DDL.
 */
trait AddressProfile { self: SuburbProfile with Profile =>
  import profile.simple._

  object Addresses extends Table[Address]("ADDRESS".asDbId) {

    def id = column[Int]("ID".asDbId, O.PrimaryKey, O.AutoInc)

    def street1 = column[String]("STREET_1".asDbId, O.NotNull)
    def street2 = column[String]("STREET_2".asDbId, O.Nullable)
    def suburbId = column[Int]("SUBURB__ID".asDbId, O.NotNull)

    def suburb = foreignKey("SUBURB_FK", suburbId, Suburbs)(_.id)

    class AddressWithId extends Address with SurrogateIntId {
      val id: Int = 0
    }

    def * = id ~ street1 ~ street2 ~ suburbId <> (
      { (id, street1, street2, suburbId) => new AddressWithId() },
      { address: Address => Some((0, "", "", 0)) })

    def byId = createFinderBy(_.id)
  }
}

/**
 * Entity object for MapperDao.
 */
class AddressEntity(implicit dbms: String) extends Entity[Int, SurrogateIntId, Address] with Logging {
  trace("Creating AddressEntity")
  val id = key("ID".asDbId) autogenerated (_.id)
  val street1 = column("STREET_1".asDbId) to (_.street1)
  val street2 = column("STREET_2".asDbId) to (_.street2)
  val suburb = manytoone(new SuburbEntity) foreignkey ("SUBURB__ID".asDbId) to (_.suburb)
  def constructor(implicit m: ValuesMap) =
    new Address(street1, street2, suburb) with SurrogateIntId {
      val id: Int = AddressEntity.this.id
    }
}

/**
 * The Address entity ...
 *
 * @param id
 * The address' id (primary key).
 *
 * @param street1
 * Line 1 of the street portion of the address.
 *
 * @param street2
 * Line 2 of the street portion of the address.
 *
 * @param suburbId
 * The address' [[Suburb]].
 *
 * @param state
 * The suburb's state.
 *
 * @param country
 * The suburb's country (Defaults to "Australia"). To support DeltaSoft framework version 1, this
 * field is tagged as transient so it won't be persisted in the database.
 *
 */
@javax.persistence.Entity
@Table(name = "ADDRESS")
case class Address(
    @(Column @field)(name = "STREET_1")@BeanProperty var street1: String = null,
    @(Column @field)(name = "STREET_2")@BeanProperty var street2: String = null,
    @(OneToOne @field)(cascade = Array(CascadeType.ALL))@(JoinColumn @field)(name = "SUBURB__ID")@BeanProperty var suburb: Suburb = null) {

  @Id
  @GeneratedValue(strategy = GenerationType.IDENTITY)
  @Column(name = "ID")
  @BeanProperty
  var id1: Int = _

  def this() = this(street1 = null)

  override def toString() = {
    List(street1, street2, suburb) filter (_ != null) mkString (", ")
  }
}