package com.dtc.deltasoft.entity

import javax.persistence._
import scala.annotation.target.field
import scala.beans.BeanProperty
import com.googlecode.mapperdao._
import com.googlecode.mapperdao.{ Entity }
import scala.slick.driver._
import grizzled.slf4j.Logging

/**
 * Persistence profile for Slick. Used for generating DDL.
 */
trait PersonProfile { self: AddressProfile with Profile =>
  import profile.simple._

  object Persons extends Table[Person]("PERSON".asDbId) {

    def id = column[Int]("ID".asDbId, O.PrimaryKey, O.AutoInc)

    def surname = column[String]("SURNAME".asDbId, O.NotNull)
    def firstName = column[String]("FIRST_NAME".asDbId)
    def homeAddressId = column[Int]("HOME_ADDRESS__ID".asDbId, O.NotNull)
    def workAddressId = column[Int]("WORK_ADDRESS__ID".asDbId, O.NotNull)

    def homeAddress = foreignKey("HOME_ADDRESS_FK", homeAddressId, Addresses)(_.id)
    def workAddress = foreignKey("WORK_ADDRESS_FK", workAddressId, Addresses)(_.id)

    class PersonWithId extends Person with SurrogateIntId {
      val id: Int = 0
    }

    def * = id ~ surname ~ firstName ~ homeAddressId ~ workAddressId <> (
      { (id, surname, firstName, homeAddressId, workAddressId) => new PersonWithId() },
      { person: Person => Some((0, "", "", 0, 0)) })

    def byId = createFinderBy(_.id)
  }
}

/**
 * Entity object for MapperDao.
 */
class PersonEntity(implicit dbms: String) extends Entity[Int, SurrogateIntId, Person] with Logging {
  trace("Creating PersonEntity")
  val id = key("ID".asDbId) autogenerated (_.id)
  val surname = column("SURNAME".asDbId) to (_.surname)
  val firstName = column("FIRST_NAME".asDbId) to (_.firstName)
  val homeAddress = manytoone(new AddressEntity) foreignkey ("HOME_ADDRESS__ID".asDbId) to (_.homeAddress)
  val workAddress = manytoone(new AddressEntity) foreignkey ("WORK_ADDRESS__ID".asDbId) to (_.workAddress)
  def constructor(implicit m: ValuesMap) =
    new Person(surname, firstName, homeAddress, workAddress) with SurrogateIntId {
      val id: Int = PersonEntity.this.id
    }
}

/**
 * The Person entity ...
 *
 * @param id
 * The persons' id (primary key).
 *
 * @param surname
 * The person's surname.
 *
 * @param firstName
 * The person's first name.
 *
 * @param homeAddress
 * The person's home address.
 *
 * @param workAddress
 * The person's work address.
 *
 */
@javax.persistence.Entity
@Table(name = "ADDRESS")
case class Person(
    @(Column @field)(name = "SURNAME")@BeanProperty var surname: String = null,
    @(Column @field)(name = "FIRST_NAME")@BeanProperty var firstName: String = null,
    @(Column @field)(name = "HOME_ADDRESS__ID")@BeanProperty var homeAddress: Address = null,
    @(Column @field)(name = "WORK_ADDRESS__ID")@BeanProperty var workAddress: Address = null) {

  //  @OneToOne(cascade = Array(CascadeType.ALL))
  //  @JoinColumn(name = "HOME_ADDRESS__ID")
  //  @BeanProperty
  //  var homeAddress: Address = null

  //  @OneToOne(cascade = Array(CascadeType.ALL))
  //  @JoinColumn(name = "WORK_ADDRESS__ID")
  //  @BeanProperty
  //  var workAddress: Address = null

  def this() = this(surname = null)

  override def toString() = {
    surname + ", " + firstName
  }
}
