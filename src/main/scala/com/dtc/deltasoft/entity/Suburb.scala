package com.dtc.deltasoft.entity

import javax.persistence._
import scala.annotation.target.field
import scala.beans.BeanProperty
import com.googlecode.mapperdao._
import com.googlecode.mapperdao.{ Entity }

/**
 * Persistence profile for Slick. Used for generating DDL.
 */
trait SuburbProfile { self: Profile =>
  import profile.simple._

  object Suburbs extends Table[Suburb]("suburb") {

    def id = column[Int]("id", O.PrimaryKey, O.AutoInc)

    def name = column[String]("name", O.NotNull)
    def postcode = column[String]("postcode", O.NotNull)
    def state = column[String]("state", O.NotNull)
    def country = column[String]("country", O.NotNull)

    class SuburbWithId extends Suburb with SurrogateIntId {
      val id: Int = 0
    }
    
    def * = id ~ name ~ postcode ~ state ~ country <> (
      { (i, n, p, s, c) => new SuburbWithId()},
      { s: Suburb => Some((0,"", "", "", "")) })

    def byId = createFinderBy(_.id)
  }
}

object SuburbEntity extends Entity[Int, SurrogateIntId, Suburb] {
  val id = key("id") autogenerated (_.id)
  val name = column("name") to (_.name)
  val postcode = column("postcode") to (_.postcode)
  val state = column("state") to (_.state)
  val country = column("country") to (_.country)
  def constructor(implicit m: ValuesMap) =
    new Suburb(name, postcode, state, country) with SurrogateIntId {
      val id: Int = SuburbEntity.id
    }
}

/**
 * The Suburb entity represents a location forming part of an [[Address]]. The following fields are
 * transient for compatibility with version 1 databases:
 *  - Country
 *
 * @param id
 * The suburb's id (primary key).
 *
 * @param name
 * The suburb's name.
 *
 * @param postcode
 * The suburb's postcode.
 *
 * @param state
 * The suburb's state.
 *
 * @param country
 * The suburb's country (Defaults to "Australia"). To support DeltaSoft framework version 1, this
 * field is tagged as transient so it won't be persisted in the database.
 *
 */
@javax.persistence.Entity
@Table(name = "suburb")
case class Suburb(
    //    @(Id @field)@(GeneratedValue @field)@(Column @field)(name = "id")@BeanProperty var id: Int = -1,
    @(Column @field)(name = "name")@BeanProperty var name: String = null,
    @(Column @field)(name = "postcode")@BeanProperty var postcode: String = null,
    @(Column @field)(name = "state")@BeanProperty var state: String = null,
    @(Transient @field)@(Column @field)(name = "country")@BeanProperty var country: String = "Australia") {

  def this() = this(name = null)

  override def toString() = {
    val statePostcode = List(state, postcode) filter (_ != null) mkString (" ") trim ()
    List(name, statePostcode, country) filter (x => x != null && x.toString.length != 0) mkString (", ")
  }
}
