package com.dtc.deltasoft.entity

import scala.annotation.meta.field
import scala.beans.BeanProperty
import slick.driver._
import javax.persistence._

import com.dtc.deltasoft.Logging
import com.googlecode.mapperdao._
import com.googlecode.mapperdao.{ Entity }
import com.googlecode.mapperdao.utils._
import org.scalaequals.ScalaEquals._
import org.scalaequals.ScalaEqualsExtend

/**
 * Persistence profile for Slick. Used for generating DDL.
 */
trait AddressProfile { self: SuburbProfile with Profile =>
  import profile.simple._

  class Addresses(tag: Tag) extends Table[Address](tag, "ADDRESS".asDbId) {

    def id = column[Int]("ID".asDbId, O.PrimaryKey, O.AutoInc)

    def street1 = column[String]("STREET_1".asDbId, O.NotNull)
    def street2 = column[String]("STREET_2".asDbId, O.Nullable)
    def suburbId = column[Int]("SUBURB__ID".asDbId, O.NotNull)

    def suburb = foreignKey("SUBURB_FK", suburbId, suburbs)(_.id)

//    def * = id ~ street1 ~ street2 ~ suburbId <> (
//      { rs => new Address(rs._2, rs._3, null) with SurrogateIntId { val id: Int = rs._1 } },
//      { address: Address => Some((0, "", "", 0)) })

    def * = (id, street1, street2, suburbId)
  }
  object addresses extends TableQuery(new Addresses(_)) {    
      
    val byId = this.findBy(_.id)
  }
}

/**
 * MapperDao '''CRUD''' class for the [[Address]] entity.
 */
class AddressDao(ormConnections: OrmConnections)(implicit dbConfig: DbConfig)
    extends TransactionalSurrogateIntIdCRUD[Address]
    with SurrogateIntIdAll[Address] {
  val mapperDao = ormConnections.mapperDao
  val queryDao = ormConnections.queryDao
  val txManager = ormConnections.txManager
  val entity = new AddressEntity
}

/**
 * MapperDao '''Entity''' class for the [[Address]] entity.
 */
class AddressEntity(implicit dbConfig: DbConfig)
    extends Entity[Int, SurrogateIntId, Address] with Logging {
  trace("Creating AddressEntity")
  val id = key("ID".asDbId) autogenerated (_.id)
  val street1 = column("STREET_1".asDbId) to (_.street1)
  val street2 = column("STREET_2".asDbId) to (_.street2)
  val suburb = manytoone(new SuburbEntity) foreignkey ("SUBURB__ID".asDbId) to (_.suburb)
  def constructor(implicit m: ValuesMap) =
    new Address(street1, street2, suburb) with SurrogateIntId {
      val id: Int = AddressEntity.this.id
    }
}

/**
 *
 */
object Address {

  def apply(street1: String = null, street2: String = null, suburb: Suburb = null) =
    new Address(street1, street2, suburb)
}

/**
 * The Address entity ...
 *
 */
@javax.persistence.Entity
@Table(name = "ADDRESS")
class Address() {

  @Id @GeneratedValue(strategy = GenerationType.IDENTITY) @Column(name = "ID") @BeanProperty
  var hibernateId: Int = _

  /**
   * Line 1 of the street portion of the address.
   */
  @Column(name = "STREET_1") @BeanProperty var street1: String = _

  /**
   * Line 2 of the street portion of the address.
   */
  @Column(name = "STREET_2") @BeanProperty var street2: String = _

  /**
   * The address' [[Suburb]].
   */
  @OneToOne(cascade = Array(CascadeType.ALL)) @JoinColumn(name = "SUBURB__ID")
  @BeanProperty var suburb: Suburb = _

  override def equals(other: Any): Boolean = ScalaEqualsExtend.equal(street1, street2, suburb)
  override def hashCode(): Int = hash
  def canEqual(other: Any): Boolean = canEquals

  def this(street1: String = null, street2: String = null, suburb: Suburb = null) = {
    this()
    setStreet1(street1)
    setStreet2(street2)
    setSuburb(suburb)
  }

  override def toString() = {
    List(street1, street2, suburb) filter (_ != null) mkString (", ")
  }
}