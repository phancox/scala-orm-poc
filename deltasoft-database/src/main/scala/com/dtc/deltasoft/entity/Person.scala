package com.dtc.deltasoft.entity

import scala.annotation.meta.field
import scala.beans.BeanProperty
import slick.driver._
import javax.persistence._

import com.dtc.deltasoft.Logging
import com.googlecode.mapperdao._
import com.googlecode.mapperdao.{ Entity }
import com.googlecode.mapperdao.utils._
import org.scalaequals.ScalaEquals._
import org.scalaequals.ScalaEqualsExtend

import org.hibernate.annotations.Type
import org.joda.time._

/**
 * Persistence profile for Slick. Used for generating DDL.
 */
trait PersonProfile { self: AddressProfile with Profile =>
  import profile.simple._

  class Persons(tag: Tag) extends Table[Person](tag, "PERSON".asDbId) {

    def id = column[Int]("ID".asDbId, O.PrimaryKey, O.AutoInc)

    def surname = column[String]("SURNAME".asDbId, O.NotNull)
    def firstName = column[String]("FIRST_NAME".asDbId, O.NotNull)
    def dateOfBirth = column[java.sql.Date]("DATE_OF_BIRTH".asDbId, O.Nullable)
    def homeAddressId = column[Int]("HOME_ADDRESS__ID".asDbId)
    def workAddressId = column[Int]("WORK_ADDRESS__ID".asDbId)

    def homeAddress = foreignKey("HOME_ADDRESS_FK", homeAddressId, addresses)(_.id)
    def workAddress = foreignKey("WORK_ADDRESS_FK", workAddressId, addresses)(_.id)

//    def * = id ~ surname ~ firstName ~ dateOfBirth ~ homeAddressId ~ workAddressId <> (
//      { rs => new Person(rs._2, rs._3, new LocalDate(rs._4), null, null) with SurrogateIntId { val id: Int = rs._1 } },
//      { person: Person => Some((0, "", "", new java.sql.Date(0), 0, 0)) })

    def * = (id, surname, firstName, dateOfBirth, homeAddressId, workAddressId) <> (
      { rs => new Person(rs._2, rs._3, new LocalDate(rs._4), null, null) with SurrogateIntId { val id: Int = rs._1 } },
      { person: Person => Some((0, "", "", new java.sql.Date(0), 0, 0)) })
  }
  object persons extends TableQuery(new Persons(_)) {
      
    val byId = this.findBy(_.id)
  }
}

/**
 * MapperDao '''CRUD''' class for the [[Person]] entity.
 */
class PersonDao(ormConnections: OrmConnections)(implicit dbConfig: DbConfig)
    extends TransactionalSurrogateIntIdCRUD[Person]
    with SurrogateIntIdAll[Person] {
  val mapperDao = ormConnections.mapperDao
  val queryDao = ormConnections.queryDao
  val txManager = ormConnections.txManager
  val entity = new PersonEntity
}

/**
 * MapperDao '''Entity''' class for the [[Person]] entity.
 */
class PersonEntity(implicit dbConfig: DbConfig) extends Entity[Int, SurrogateIntId, Person] with Logging {
  trace("Creating PersonEntity")
  val id = key("ID".asDbId) autogenerated (_.id)
  val surname = column("SURNAME".asDbId) to (_.surname)
  val firstName = column("FIRST_NAME".asDbId) to (_.firstName)
  val dateOfBirth = column("DATE_OF_BIRTH".asDbId) to (_.dateOfBirth)
  val homeAddress = manytoone(new AddressEntity) foreignkey ("HOME_ADDRESS__ID".asDbId) to (_.homeAddress)
  val workAddress = manytoone(new AddressEntity) foreignkey ("WORK_ADDRESS__ID".asDbId) to (_.workAddress)
  def constructor(implicit m: ValuesMap) =
    new Person(surname, firstName, dateOfBirth, homeAddress, workAddress) with SurrogateIntId {
      val id: Int = PersonEntity.this.id
    }
}

/**
 *
 */
object Person {

  def apply(surname: String = null, firstName: String = null, dateOfBirth: LocalDate = null,
            homeAddress: Address = null, workAddress: Address = null) =
    new Person(surname, firstName, dateOfBirth, homeAddress, workAddress)
}

/**
 * The Person entity ...
 *
 */
@javax.persistence.Entity
@Table(name = "PERSON")
class Person() {

  @Id @GeneratedValue(strategy = GenerationType.IDENTITY) @Column(name = "ID") @BeanProperty
  var hibernateId: Int = _

  /**
   * The person's surname.
   */
  @Column(name = "SURNAME") @BeanProperty var surname: String = _

  /**
   * The person's first name.
   */
  @Column(name = "FIRST_NAME") @BeanProperty var firstName: String = _

  /**
   * The person's date of birth.
   */
  @Type(`type` = "org.jadira.usertype.dateandtime.joda.PersistentLocalDate")
  @Column(name = "DATE_OF_BIRTH") @BeanProperty var dateOfBirth: LocalDate = _

  /**
   * The person's home address.
   */
  @OneToOne(cascade = Array(CascadeType.ALL)) @JoinColumn(name = "HOME_ADDRESS__ID")
  @BeanProperty var homeAddress: Address = _

  /**
   * The person's work address.
   */
  @OneToOne(cascade = Array(CascadeType.ALL)) @JoinColumn(name = "WORK_ADDRESS__ID")
  @BeanProperty var workAddress: Address = _

  override def equals(other: Any): Boolean = ScalaEqualsExtend.equal(
    surname, firstName, dateOfBirth, homeAddress, workAddress)
  override def hashCode(): Int = hash
  def canEqual(other: Any): Boolean = canEquals

  def this(surname: String = null, firstName: String = null, dateOfBirth: LocalDate = null,
           homeAddress: Address = null, workAddress: Address = null) = {
    this()
    setSurname(surname)
    setFirstName(firstName)
    setDateOfBirth(dateOfBirth)
    setHomeAddress(homeAddress)
    setWorkAddress(workAddress)
  }

  override def toString() = {
    surname + ", " + firstName
  }
}
